<UserControl x:Class="YoutubeViewers.WPF.Views.YoutubeViewersView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:YoutubeViewers.WPF.Views"
             xmlns:components="clr-namespace:YoutubeViewers.WPF.Components"
             xmlns:custom="clr-namespace:LoadingSpinnerControl;assembly=LoadingSpinnerControl"
             mc:Ignorable="d"
             d:DesignHeight="450"
             d:DesignWidth="800">
    <!--Aqui definimos primeiro as Linhas, depois cada Grid declarado é uma dessas linhas
    Em cada Grid (linha) definimos as Colunas e especificamos o que colocar em cada-->
    <Grid>
        <!--Aqui temos a renderização do Spinning Loader, caso a prop. IsLoading (que está dentro do nesta ViewModel)
        Seja verdadeira. Caso não, é renderizado a aplicação-->
        <StackPanel VerticalAlignment="Center">
            <!--O Grid.Style é o que define a renderização condicional da Grid-->
            <StackPanel.Style>
                <Style TargetType="StackPanel">
                    <Setter Property="Visibility"
                            Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading}"
                                     Value="True">
                            <Setter Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>

            <!--Aqui usamos o LoadingSpinner (pacote do SingletonSean)-->
            <custom:LoadingSpinner Diameter="100"
                                   Thickness="2"
                                   IsLoading="True" />

            <TextBlock Margin="0 10 0 0"
                       TextAlignment="Center"
                       Text="Loading Youtube viewers..." />
        </StackPanel>

        <Grid>
            <!--Aqui temos a nossa aplicação, porém colocamos dentro de um Grid para condicionar a renderização
            Baseado no Loading de dados (spinning loader)-->
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility"
                            Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading}"
                                     Value="False">
                            <Setter Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <!--Aqui o Grid caso ocorra algum erro-->
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility"
                                Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasErrorMessage}"
                                         Value="True">
                                <Setter Property="Visibility"
                                        Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>

                <!--Temos um estilo padrão para mensagens de erro
                Todos os estilos padrões ficam em App.xaml-->
                <TextBlock VerticalAlignment="Center"
                           TextAlignment="Center"
                           Text="{Binding ErrorMessage}"
                           Style="{StaticResource ErrorMessage}" />
            </Grid>


            <!--Aqui o Grid com a lista, caso não ocorram erros-->
            <Grid>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility"
                                Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasErrorMessage}"
                                         Value="False">
                                <Setter Property="Visibility"
                                        Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <!--Grid para a primeira linha, com o título do App e botão de Add-->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0"
                               FontSize="32"
                               Text="Youtube Viewers" />

                    <Button Grid.Column="1"
                            FontSize="16"
                            Content="Add"
                            Command="{Binding AddYoutubeViewerCommand}" />
                </Grid>

                <!--Grid para a segunda linha, com o Listing e Details-->
                <Grid Grid.Row="1"
                      Margin="0 20 0 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="2*" />
                    </Grid.ColumnDefinitions>

                    <components:YoutubeViewersListing Grid.Column="0"
                                                      DataContext="{Binding YoutubeViewersListingViewModel}" />
                    <components:YoutubeViewersDetails Grid.Column="1"
                                                      DataContext="{Binding YoutubeViewersDetailsViewModel}"
                                                      Margin="20 0 0 0" />
                </Grid>
            </Grid>
        </Grid>
    </Grid>
</UserControl>
